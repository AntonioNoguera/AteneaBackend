// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//Enums
enum subject_plan {
  P401  @map("401")
  P402  @map("402")
  P4040 @map("4040")
}

enum user_role {
  ADMIN
  EDITOR
  USER
}

model user {
  id        Int    @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      user_role @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  departmentsModified department[]
  academiesContributed academy[]
  subjectsContributed   subject[]
}

model department {
  id                Int      @id @default(autoincrement())
  name              String
  lastModification  DateTime @updatedAt 
  lastContributor   user     @relation(fields: [lastContributorId], references: [id])
  lastContributorId Int

  academies         academy[]
}

model academy {
  id               Int        @id @default(autoincrement())
  name             String
  parentDepartmentId Int
  parentDepartment department @relation(fields: [parentDepartmentId], references: [id], onDelete: Cascade)
   
  lastModification DateTime   @updatedAt
  lastContributor  user       @relation(fields: [lastContributorId], references: [id])
  lastContributorId Int

  subjects            subject[]
}

model subject {
  id                 Int          @id @default(autoincrement())
  name               String
  parentAcademy      academy      @relation(fields: [parentAcademyId], references: [id])
  parentAcademyId    Int
  plan               subject_plan
  subjectInfo        Json?
  lastModification   DateTime     @updatedAt
  lastContributor    user         @relation(fields: [lastContributorId], references: [id])
  lastContributorId  Int

  resources          resource[]
}

model resource {
  id          Int      @id @default(autoincrement())
  name        String
  fileType    String
  content     String
  size        String
  subject     subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId   Int
}